PRE GOROUTINES
Processed 362325 records in 3h52m50.975763541s
362325 edges created in 3h52m50.975763541s
1555 edges/min

POST GOROUTINES ON NAME/TITLE INDEXING | performance improves over time with indexing
Processed 15218 records in 9m58.923858625s
1521.8 edges/min


// NOTE Bottleneck is the principal CSV reader. It's the largest file by 10x.
// Once the name/title indexing is done, the processing speeds up substantially.
// If we could distribute the principal CSV reader, we could speed up the processing even more.
// Could line up reader workers sequentially, each reading from their own reader iterator. Give them each an offset of 1000 and let them read until EOF.
DIFFERENT MEASUREMENT STARTS HERE
4 Workers - Each opening the csv and reading from line 0 - Processed 5827 records in 20m54.061481334s
4 workers - Processed 58766000 records in 1h21m47.311783084s Holy shit
4 workers - Processed 7261000 records in 1m32.7195415s less logging
8 workers - Processed 7686000 records in 1m32.716717334s
16 workers - Processed 86711837 records in 15m15.001473375s Really ramps up once the title/name indexing is done
32 workers - Processed 86000000 records in 14m45.452652542s Diminishing returns on workers. Bottlenecked by principals

FIXING NAME INDEXING AND GROOMING THE NAMES CSV
16 workers - Processed 86712988 records in 7m45.004030625s Fixed the indexer, daaang

/*
	title.principals
		tconst - Title ID - string
		ordering - Order of entries when Title ID is the same - int
		nconst - Person ID - string
		job - name of the job - string
		category - category of job - string

	name.basics
		nconst - Person ID - string
		primaryName - Name of person - string
		birthYear - ... - int
		deathYear - ... - int
		primaryProfession - listed professions on IMDB - []string

	title.basics
		tconst - Title ID - string
		titleType - Type of title - string
		primaryTitle - Movie's title - string
		originalTitle - original title? - string
		isAdult - is it pornog? - int (0 | 1)

	title.principals is a record of every "principal" in every title

	To generate graph + index
	1. Iterate over title.principals
	2. Check if the "title" has a record created
	2.a. If not, fetch title information from title.basics
	2.b. Create a title object and add it to the Graph Index + Vertices
	3. Check if the "principal" has a record in the graph
	3.a. If not, fetch "principal" information from name.basics
	3.b. Create a "Person" object and add it to the Graph Index + Vertices

	Export Graph to CSV
	Generate 2 files: Index.csv, Edges.csv

	Index.csv
	ID,       Value
	<string>, <serialized JSON>

	Edges.csv
	ID, Edges
	<string>, <[]ID[Node]>

	Import Graph from CSV
		file, err := os.Open("data.tsv")
    if err != nil {
        panic(err)
    }
    defer file.Close()

		// Create a new CSV reader with tab as the delimiter
    reader := csv.NewReader(file)
    reader.Comma = '\t'

    // Read all records from the TSV file
    records, err := reader.ReadAll()
    if err != nil {
        panic(err)
    }

		type IndexImportRow struct {
			ID,
			Value
		}
		var indexData []IndexImportRow = OS.open
		var vertices []Node = OS.open('Index.csv')
		
		var edges []ID[Node] = OS.open('Vertices.csv')
		graph := createGraph(vertices, edges)
*/

// Could preprocess the csv files to make the indexing faster.
// Could also use a database to store the graph.

// Read about force directed layout for visualizing the graph

// Could add hidden edges connecting films by category
// Could add a "search" function to search for a person or movie and see a force directed graph of the results up to n nodes from the search